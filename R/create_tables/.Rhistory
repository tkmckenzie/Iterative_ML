source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
N = nrow(X)
alpha.sq = alpha^2
result = matrix(NA, nrow = N, ncol = N)
i = 1
j = 2
X.diff = X[i,] - X[j,]
temp.result = alpha.sq * exp(-0.5 * t(X.diff) %*% P.inv %*% X.diff)
t(X.diff)
P.inv
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
N = nrow(X)
alpha.sq = alpha^2
result = matrix(NA, nrow = N, ncol = N)
for (i in 1:N){
result[i, i] = alpha.sq
for (j in (i + 1):(N - 1)){
X.diff = X[i,] - X[j,]
temp.result = alpha.sq * exp(-0.5 * t(X.diff) %*% P.inv %*% X.diff)
result[i, j] = temp.result
result[j, i] = temp.result
}
}
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
source('~/git/fortuna/cov.exp.quad.R', echo=TRUE)
source('~/git/Iterative_ML/R/gibbs_stan_bridge_lm/gibbs_ml.R', echo=TRUE)
source('~/git/Iterative_ML/R/gibbs_stan_bridge_lm/stan_ml_bridge_fit.R', echo=TRUE)
install.packages("invgamma")
source('~/git/Iterative_ML/R/gibbs_stan_bridge_lm/stan_ml_bridge_fit.R', echo=TRUE)
log(denominator)
dim(log.prior.prop)
mean(log.prior.prop)
mean(log.prior.prop, base = 10)
log(denominator, base = 10)
exp(log.lik.prop + log.prior.prop - log(s.1 * lik.prop * prior.prop + s.2 * exp(log.marginal.lik) * dg.prop))
summary(exp(log.lik.prop + log.prior.prop - log(s.1 * lik.prop * prior.prop + s.2 * exp(log.marginal.lik) * dg.prop)))
summary(exp(log.dg.post - log(s.1 * lik.post * prior.post + s.2 * exp(log.marginal.lik) * dg.post)))
25^2
load("../gibbs_stan_bridge_lm/gibbs_mc_results.RData")
##############################
#Bridge: Comparison of iterative KDE, Gibbs, Bridge sampling
table.matrix = matrix(NA, nrow = 4, ncol = 5)
table.matrix[1,] = c("", "", "", "IKDE = Gibbs", "Bridge = Gibbs")
table.matrix[2,] = c("Gibbs", "IKDE", "Bridge", "$p$-value", "$p$-value")
load("../gibbs_stan_bridge_lm/gibbs_mc_results.RData")
table.matrix[3:4, 1] = c(round(mean(log.marginal), round.digits), paste0("(", round(sd(log.marginal)), ")"))
#Number of digits to round results to
round.digits = 3
table.matrix[3:4, 1] = c(round(mean(log.marginal), round.digits), paste0("(", round(sd(log.marginal)), ")"))
table.matrix
table.matrix[3:4, 1] = c(round(mean(log.marginal.results), round.digits), paste0("(", round(sd(log.marginal.results)), ")"))
table.matrix
table.matrix[3:4, 1] = c(round(mean(log.marginal.results), round.digits), paste0("(", round(sd(log.marginal.results), round.digits), ")"))
table.matrix
gibbs.results = log.marginal.results
model.num = 1
load(paste0("../probit_logit_chib/chib_model_", model.num, "_results.RData"))
log.marginal.results$logit
load("../gibbs_stan_bridge_lm/gibbs_mc_results.RData")
table.matrix[3:4, 1] = c(round(mean(log.marginal.results[,1]), round.digits), paste0("(", round(sd(log.marginal.results[,1]), round.digits), ")"))
gibbs.results = log.marginal.results
load("../gibbs_stan_bridge_lm/gibbs_mc_results.RData")
table.matrix[3:4, 2] = c(round(mean(log.marginal.results[,1]), round.digits), paste0("(", round(sd(log.marginal.results[,1]), round.digits), ")"))
stan.results = log.marginal.results
table.matrix
load("../gibbs_stan_bridge_lm/stan_mc_results.RData")
table.matrix[3:4, 2] = c(round(mean(log.marginal.results[,1]), round.digits), paste0("(", round(sd(log.marginal.results[,1]), round.digits), ")"))
stan.results = log.marginal.results
table.matrix
load("../gibbs_stan_bridge_lm/gibbs_mc_results.RData")
table.matrix[3:4, 1] = c(round(mean(log.marginal.results[,1]), round.digits), paste0("(", round(sd(log.marginal.results[,1]), round.digits), ")"))
gibbs.results = log.marginal.results
load("../gibbs_stan_bridge_lm/stan_mc_results.RData")
table.matrix[3:4, 2] = c(round(mean(log.marginal.results[,1]), round.digits), paste0("(", round(sd(log.marginal.results[,1]), round.digits), ")"))
stan.results = log.marginal.results
table.matrix
log.marginal.results
##############################
#Bridge: Comparison of iterative KDE, Gibbs, Bridge sampling
table.matrix = matrix(NA, nrow = 4, ncol = 5)
table.matrix[1,] = c("", "", "", "IKDE = Gibbs", "Bridge = Gibbs")
table.matrix[2,] = c("Gibbs", "IKDE", "Bridge", "$p$-value", "$p$-value")
load("../gibbs_stan_bridge_lm/gibbs_mc_results.RData")
table.matrix[3:4, 1] = c(round(mean(log.marginal.results[1,]), round.digits), paste0("(", round(sd(log.marginal.results[1,]), round.digits), ")"))
gibbs.results = log.marginal.results
load("../gibbs_stan_bridge_lm/stan_mc_results.RData")
table.matrix[3:4, 2] = c(round(mean(log.marginal.results[1,]), round.digits), paste0("(", round(sd(log.marginal.results[1,]), round.digits), ")"))
stan.results = log.marginal.results
table.matrix
load("../gibbs_stan_bridge_lm/bridge_mc_results.RData")
load("../gibbs_stan_bridge_lm/stan_bridge_mc_results.RData")
p.stan = t.test(gibbs.results, stan.results)
p.stan = t.test(gibbs.results, stan.results)$p.value
p.stan
table.matrix[3, 4] = paste0("\\multirow{2}{*}{", round(p.stan, round.digits), "}")
p.bridge = t.test(gibbs.results, bridge.results)$p.value
load("../gibbs_stan_bridge_lm/stan_bridge_mc_results.RData")
table.matrix[3:4, 3] = c(round(mean(log.marginal.results[1,]), round.digits), paste0("(", round(sd(log.marginal.results[1,]), round.digits), ")"))
bridge.results = log.marginal.results[1,]
p.stan = t.test(gibbs.results, stan.results)$p.value
p.bridge = t.test(gibbs.results, bridge.results)$p.value
table.matrix[3, 4] = paste0("\\multirow{2}{*}{", round(p.stan, round.digits), "}")
table.matrix[3, 5] = paste0("\\multirow{2}{*}{", round(p.bridge, round.digits), "}")
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
install.packages("xtable")
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
p.bridge
log(p.bridge, base = 10)
floor(log(p.bridge, base = 10))
p.bridge * -floor(log(p.bridge, base = 10))
p.bridge * 10e-floor(log(p.bridge, base = 10))
p.bridge * 10^(-floor(log(p.bridge, base = 10)))
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/gibbs_stan_bridge_lm/stan_ml_bridge_fit.R', echo=TRUE)
log.marginal
source('~/git/Iterative_ML/R/gibbs_stan_bridge_lm/mc_stan_bridge_snow.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
source('~/git/Iterative_ML/R/create_tables/create_tables.R', echo=TRUE)
