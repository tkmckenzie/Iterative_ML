source('~/code/PE/2.R', echo=TRUE)
fib.seq(3)
fibonacci.true(3)
fibonacci.true(5)
fibonacci.true(10)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(1:10)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(10)
fibonacci.true(10)
current.num = fibonacci(i)
i = 3
current.num = fibonacci(i)
source('~/code/PE/2.R', echo=TRUE)
current.sum
fibonacci(6)
fibonacci(7)
fibonacci(8)
fibonacci(9)
fibonacci(1:10)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(40)
fibonacci(41)
fibonacci(42)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
sqrt(600851475143)
source('~/code/PE/3.R', echo=TRUE)
n = 600851475143
upper.limit = floor(sqrt(n))
factors = c()
for (i in 2:upper.limit){
if (n %% i == 0){
factors = c(factors, i)
}
}
n = 100
upper.limit = floor(sqrt(n))
factors = c()
for (i in 2:upper.limit){
if (n %% i == 0){
factors = c(factors, i)
}
}
install.packages("rstan")
system("g++ -v")
system("gvv -v")
system("gcc -v")
library(ggplot2)
library(rstan)
library(dplyr)
install.packages("dplyr")
install.packages("data.table")
R.version
N = 100
x = runif(N, 0, 10)
y = 2 * x - 3 + rnorm(N, sd = 1)
plot(y ~ x)
m = lm(y ~ x)
summary(m)
t(x) %*% x
solve(t(x) %*% x)
solve(t(x) %*% x) %*% t(x) %*% y
X = cbind(1, x)
X
solve(t(X) %*% X) %*% (t(X) %*% y)
summary(m)
t(X)
t(X) %*% X
N
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
x = rnorm(N)
y = cumsum(x)
plot(y)
x = rnorm(N)
y = cumsum(x)
plot(y)
source('~/diffndiff/diff.R', echo=TRUE)
1e3 / 60
1e4 / 60
1e4 / (60^2)
1e5 / (60^2)
2104 / 4
526 * 2 * 7
2328 / 4
N = 678612
T = 582
N / T
1166 / 7
1166 / 4
1166 / 11
I = 11
582 / 106
106 / 9
106 / 8
106 / 4
106 / 2
setwd("~/docs/Iterative_ML_paper/R/gp_univariate")
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
plot(y ~ x)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
x.is = runif(5)
cov.exp.quad = function(x.1, x.2, alpha, rho){
return(exp(2 * log(alpha) - sum((x.1 - x.2)^2) / (2 * rho^2)))
}
alpha = 1
length.scale = 1
cov.exp.quad(x.is, x.is, alpha, length.scale)
cov.exp.quad(x.is, 0, alpha, length.scale)
x.is %*% 0
t(x.is) %*% x.is
x.is %*% t(x.is)
cov.exp.quad = function(x.1, x.2, alpha, rho){
dx = x.1 - x.2
return(exp(2 * log(alpha) - dx %*% t(dx) / (2 * rho^2)))
}
cov.exp.quad(x.is, 0, alpha, length.scale)
Sigma = cov.exp.quad(x.is, 0, alpha, length.scale) + sigma^2
sigma = 1
Sigma = cov.exp.quad(x.is, 0, alpha, length.scale) + sigma^2 * diag(N)
cov.exp.quad(x.is, 0, alpha, length.scale)
diag(5)
sigma^2 * diag(5)
N
N = 5
Sigma = cov.exp.quad(x.is, 0, alpha, length.scale) + sigma^2 * diag(N)
chol(Sigma)
L.Sigma = chol(Sigma)
L.Sigma %*% t(L.Sigma)
Sigma
t(L.Sigma) %*% L.Sigma
t(L.Sigma)
tri = function(M){
#Provides lower triangular version of M
M[upper.tri(M)] = 0
return(M)
}
tri(matrix(1:9, nrow = 3))
M = matrix(1:9, nrow = 3)
M
tri(M)
M
y.is = runif(5)
K.div.y.is = solve(tri(L.sigma)) %*% y.is
L.Sigma = t(chol(Sigma))
K.div.y.is = solve(tri(L.sigma)) %*% y.is
K.div.y.is = solve(tri(L.Sigma)) %*% y.is
K.div.y.is
solve(tri(L.Sigma), y.is)
K.div.y.is %*% solve(L.Sigma)
K.div.y.is = t(K.div.y.is) %*% solve(L.Sigma)
K.div.y.is
K.div.y.is = solve(tri(L.Sigma), y.is)
t(K.div.y.is) %*% solve(L.Sigma)
solve(L.Sigma, K.div.y.is)
solve(K.div.y.is, L.Simga)
solve(K.div.y.is, L.Sigma)
solve(L.Sigma, t(K.div.y.is))
solve(t(K.div.y.is), L.Sigma)
solve(t(L.Sigma), K.div.y.is)
K.div.y.is = solve(t(L.Sigma), K.div.y.is)
x.pred = x
x.1 %*% t(x.1)
x.is %*% t(x.is)
x.is %*% t(rep(x.is, times = 2))
setwd("~/docs/Iterative_ML_paper/R/gp_univariate")
?stan
library(rstan)
?stan
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
stan.extract = extract(stan.fit)
stan.extract$res
stan.extract$res[,1,]
stan.extract$res[1,,]
cov.exp.quad = function(x.1, x.2, alpha, rho){
dx = x.1 - x.2
return(exp(2 * log(alpha) - dx %*% t(dx) / (2 * rho^2)))
}
cov.exp.quad(x, 0, 0.5, 2)
x %*% t(x)
alpha^2 * exp(x %*% t(x) / (2 * rho^2))
alpha = .5
rho = 2
alpha = .5
alpha^2 * exp(x %*% t(x) / (2 * rho^2))
alpha^2 * exp(-x %*% t(x) / (2 * rho^2))
x - t(x)
t(x) - t(t(x))
dist(x)
dist(x, diag = TRUE, upper = TRUE)
dist = function(x.1, x.2){
nrow = length(x.1)
ncol = length(x.2)
m = matrix(NA, nrow = nrow, ncol = ncol)
for (i in 1:nrow){
for (j in 1:ncol){
m[i, j] = (x.1[i] - x.2[j])^2
}
}
}
cov.exp.quad = function(x.1, x.2, alpha, rho){
dx = x.1 - x.2
return(exp(2 * log(alpha) - dist(x.1, x.2) / (2 * rho^2)))
}
cov.exp.quad(x, x, 0.5, 2)
dist(x, x)
dist = function(x.1, x.2){
nrow = length(x.1)
ncol = length(x.2)
m = matrix(NA, nrow = nrow, ncol = ncol)
for (i in 1:nrow){
for (j in 1:ncol){
m[i, j] = (x.1[i] - x.2[j])^2
}
}
return(m)
}
cov.exp.quad = function(x.1, x.2, alpha, rho){
dx = x.1 - x.2
return(exp(2 * log(alpha) - dist(x.1, x.2) / (2 * rho^2)))
}
cov.exp.quad(x, x, 0.5, 2)
stan.extract$res[1,,]
x.1 = x
x.2 = x
m = matrix(NA, nrow = nrow, ncol = ncol)
for (i in 1:nrow){
for (j in i:ncol){
m[i, j] = (x.1[i] - x.2[j])^2
}
}
nrow = length(x.1)
ncol = length(x.2)
m = matrix(NA, nrow = nrow, ncol = ncol)
for (i in 1:nrow){
for (j in i:ncol){
m[i, j] = (x.1[i] - x.2[j])^2
}
}
m
m[lower.tri(m)] = t(m)[lower.tri(m)]
m
dist = function(x.1, x.2){
nrow = length(x.1)
ncol = length(x.2)
m = matrix(NA, nrow = nrow, ncol = ncol)
for (i in 1:nrow){
for (j in i:ncol){
m[i, j] = (x.1[i] - x.2[j])^2
}
}
m[lower.tri(m)] = t(m)[lower.tri(m)]
return(m)
}
cov.exp.quad = function(x.1, x.2, alpha, rho){
dx = x.1 - x.2
return(exp(2 * log(alpha) - dist(x.1, x.2) / (2 * rho^2)))
}
cov.exp.quad(x, x, 0.5, 2)
stan.extract$res[1,,]
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
dist = function(x.1, x.2){
nrow = length(x.1)
ncol = length(x.2)
m = matrix(NA, nrow = nrow, ncol = ncol)
for (i in 1:nrow){
for (j in 1:ncol){
m[i, j] = (x.1[i] - x.2[j])^2
}
}
return(m)
}
cov.exp.quad = function(x.1, x.2, alpha, rho){
dx = x.1 - x.2
return(exp(2 * log(alpha) - dist(x.1, x.2) / (2 * rho^2)))
}
cov.exp.quad(x1, x2)
dist(x1, x2)
exp(2 * log(alpha) - dist(x.1, x.2) / (2 * rho^2))
cov.exp.quad(x1, x2, 0.5, 2)
stan.extract$res[1,,]
diag(diag(3))
setwd("~/docs/Iterative_ML_paper/R/gp_univariate")
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
f.pred = matrix(NA, ncol = 2, nrow = length(x.pred))
N.pred = length(x.pred)
N = length(y.is)
Sigma = cov.exp.quad(x.is, x.is, alpha, length.scale) + sigma^2 * diag(N)
L.Sigma = t(chol(Sigma))
K.div.y.is = solve(tri(L.Sigma), y.is)
K.div.y.is = solve(t(L.Sigma), K.div.y.is)
k.x.is.x.pred = cov.exp.quad(x.is, x.pred, alpha, length.scale)
f.pred.mu = t(k.x.is.x.pred) %*% K.div.y.is
v.pred = solve(tri(L.Sigma), k.x.is.x.pred)
cov.f.pred = cov.exp.quad(x.pred, x.pred, alpha, length.scale) - t(v.pred) %*% v.pred
f.pred[,1] = f.pred.mu
f.pred[i, 2] = sqrt(diag(cov.f.pred) + sigma^2)
f.pred[,2] = sqrt(diag(cov.f.pred) + sigma^2)
f.pred
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
fit[,1]
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_func_test.R', echo=TRUE)
stan.extract = extract(stan.fit)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_test.R', echo=TRUE)
stan.extract$f_pred
stan.extract$f_pred[1,,]
stan.extract$f_pred
stan.extract$f_pred[1,1,]
f.pred = stan.extract$f_pred[1,1,]
fit = stan.extract$f_pred[1,,]
fit[,1]
fit = t(stan.extract$f_pred[1,,])
fit[,1]
point.df = data.frame(x, y)
fit.df = data.frame(x = x.pred, y = fit[,1])
ggplot(point.df, aes(x, y)) + geom_point() +
geom_line(data = fit.df, color = "red")
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
stan.extract$length_scale
source("gp_univariate_genfit.R")
fit = lapply(1:sample.iter, function(i) gp.fit(x.pred, y, x,
stan.fit$alpha[i],
stan.fit$length_scale[i],
stan.fit$sigma[i]))
fit = lapply(1:sample.iter, function(i) gp.fit(x.pred, y, x,
stan.extract$alpha[i],
stan.extract$length_scale[i],
stan.extract$sigma[i]))
fit[[1]]
mean.fit = Reduce(mean, fit)
abind(fit[[1]], fit[[2]])
library(abind)
abind(fit[[1]], fit[[2]])
abind(fit[[1]], fit[[2]], along = 3)
mean.fit = Reduce(abind, fit, along = 3)
mean.fit = Reduce(function(m1, m2) abind(m1, m2, along = 3), fit)
fit = Reduce(function(m1, m2) abind(m1, m2, along = 3), fit)
mean.fit = apply(fit, c(1, 2), mean)
dim(mean.fit)
mean.fit
point.df = data.frame(x = x, y = y)
fit.df = data.frame(x = x.pred, y = mean.fit[,1])
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, color = "red")
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
x = seq(0, 10, length.out = 1000)
x
plot(dgamma(x, 1, 1) ~ x, type = "l")
plot(dgamma(x, 2, 20) ~ x, type = "l")
plot(dgamma(x, 20, 2) ~ x, type = "l")
plot(dgamma(x, 10, 10) ~ x, type = "l")
plot(dgamma(x, 1, 10) ~ x, type = "l")
plot(dgamma(x, 1, 0.1) ~ x, type = "l")
plot(dgamma(x, 4, 0.1) ~ x, type = "l")
plot(dgamma(x, 2, 0.1) ~ x, type = "l")
x = seq(0, 100, length.out = 1000)
plot(dgamma(x, 2, 0.1) ~ x, type = "l")
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
mean(stan.extract$length_scale)
mean(dgamma(10000, 2, 0.1))
mean(dgamma(10000, 2, 0.1))
mean(rgamma(10000, 2, 0.1))
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
mean(stan.extract$length_scale)
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group))
fit.df = data.frame(x = rep(x.pred, times = sample.iter), y = c(fit[,1]), group = rep(1:sample.iter, each = N))
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group))
dim(fit)
fit[,1,]
head(c(fit[,1,]))
fit.df = data.frame(x = rep(x.pred, times = sample.iter), y = c(fit[,1,]), group = rep(1:sample.iter, each = N))
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group))
fit.df = data.frame(x = rep(x.pred, times = sample.iter), y = c(fit[,1,]), group = rep(1:N, each = sample.iter))
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group))
fit.df = data.frame(x = rep(x.pred, times = sample.iter), y = c(fit[,1,]), group = rep(1:sample.iter, each = N))
plot(y ~ x, fit.df)
plot(y ~ x, subset(fit.df, group = 1), type = "l")
plot(y ~ x, subset(fit.df, group == 1), type = "l")
fit.df = data.frame(x = rep(x.pred, times = sample.iter), y = c(fit[,1,]), group = rep(1:N, each = sample.iter))
plot(y ~ x, subset(fit.df, group == 1), type = "l")
dim(fit)
head(fit.df)
subset(fit.df, group == 1)
nrow(subset(fit.df, group == 1))
fit.df[fit.df$group == 1,]
fit.df$group
dim(fit.df)
fit.df = data.frame(x = rep(x.pred, times = sample.iter), y = c(fit[,1,]), group = rep(1:sample.iter, each = N.pred))
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group))
plot(y ~ x, subset(fit.df, group == 1), type = "l")
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group), alpha = 0.25)
ggplot(point.df, aes(x, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = group), alpha = 0.05)
source('~/docs/Iterative_ML_paper/R/gp_univariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/create_data.R', echo=TRUE)
y = sapply(x, f) + rnorm(N, sd = 1)
x = matrix(runif(2 * N, 10, 100), ncol = 2)
y = sapply(x, f) + rnorm(N, sd = 1)
x[,1]
10 * x[,1]^(1/3) * x[,2]^(1/4)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/create_data.R', echo=TRUE)
x[,1]
f(x)
f = Vectorize(f)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/create_data.R', echo=TRUE)
f(x)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/create_data.R', echo=TRUE)
lm(ln(y) ~ ln(x))
lm(log(y) ~ log(x))
exp(2.2882)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/create_data.R', echo=TRUE)
summary(lm(log(y) ~ log(x)))
source('~/docs/Iterative_ML_paper/R/gp_multivariate/create_data.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gp_multivariate")
rWishart(1, 5, diag(5))[,,1]
rWishart(1, 5, diag(5))[,1,]
source('~/docs/Iterative_ML_paper/R/gp_multivariate/test.R', echo=TRUE)
t(x) %*% M %*% x
source('~/docs/Iterative_ML_paper/R/gp_multivariate/test.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gp_multivariate")
setwd("~/docs/Iterative_ML_paper/R/gp_multivariate")
source("create_data.R")
source("gp_univariate_genfit.R")
burn.iter = 1000
sample.iter = 1000
load("data.RData")
N = length(x)
rm(list = ls())
source("create_data.R")
N = nrow(x)
N.pred = 100
x.pred = seq(min(x), max(x), length.out = N.pred)
k = ncol(x)
stan.fit = stan("gp_multivariate_fit.stan", data = stan.data,
chains = 1, iter = burn.iter + sample.iter, warmup = burn.iter)
stan.data = list(N = N, k = k, y = y, x = x)
stan.fit = stan("gp_multivariate_fit.stan", data = stan.data,
chains = 1, iter = burn.iter + sample.iter, warmup = burn.iter)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_func_test.R', echo=TRUE)
warnings()
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_func_test.R', echo=TRUE)
stan.extract$test_val
x %*% x
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_func_test.R', echo=TRUE)
2 * x%*%x
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_func_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gp_multivariate/stan_gp_fit.R', echo=TRUE)
traceplot(stan.fit)
