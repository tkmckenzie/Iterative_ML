source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(1:10)
source('~/code/PE/2.R', echo=TRUE)
fib.seq(3)
fibonacci.true(3)
fibonacci.true(5)
fibonacci.true(10)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(1:10)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(10)
fibonacci.true(10)
current.num = fibonacci(i)
i = 3
current.num = fibonacci(i)
source('~/code/PE/2.R', echo=TRUE)
current.sum
fibonacci(6)
fibonacci(7)
fibonacci(8)
fibonacci(9)
fibonacci(1:10)
source('~/code/PE/2.R', echo=TRUE)
fibonacci(40)
fibonacci(41)
fibonacci(42)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
source('~/code/PE/2.R', echo=TRUE)
sqrt(600851475143)
source('~/code/PE/3.R', echo=TRUE)
n = 600851475143
upper.limit = floor(sqrt(n))
factors = c()
for (i in 2:upper.limit){
if (n %% i == 0){
factors = c(factors, i)
}
}
n = 100
upper.limit = floor(sqrt(n))
factors = c()
for (i in 2:upper.limit){
if (n %% i == 0){
factors = c(factors, i)
}
}
install.packages("rstan")
system("g++ -v")
system("gvv -v")
system("gcc -v")
library(ggplot2)
library(rstan)
library(dplyr)
install.packages("dplyr")
install.packages("data.table")
R.version
N = 100
x = runif(N, 0, 10)
y = 2 * x - 3 + rnorm(N, sd = 1)
plot(y ~ x)
m = lm(y ~ x)
summary(m)
t(x) %*% x
solve(t(x) %*% x)
solve(t(x) %*% x) %*% t(x) %*% y
X = cbind(1, x)
X
solve(t(X) %*% X) %*% (t(X) %*% y)
summary(m)
t(X)
t(X) %*% X
N
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
x = rnorm(N)
y = cumsum(x)
plot(y)
x = rnorm(N)
y = cumsum(x)
plot(y)
source('~/diffndiff/diff.R', echo=TRUE)
1e3 / 60
1e4 / 60
1e4 / (60^2)
1e5 / (60^2)
library(quantreg)
install.packages("quantref")
install.packages("quantreg")
library(quantreg)
cite(rstan)
cite("rstan")
citation("rstan")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_gibbs.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_gibbs.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_gibbs.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
x = var.test(gibbs.results, stan.results, alternative = "greater")
x$p.value
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm_time")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm_time/gibbs_stan_lm_test.R', echo=TRUE)
sum(!is.na(gibbs.results))
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm_time/mc_gibbs.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm_time/mc_gibbs.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm_time/gibbs_stan_lm_test.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/gibbs_stan_probit_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/probit_logit_chib/chib_results.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/probit_logit_chib")
source('~/docs/Iterative_ML_paper/R/probit_logit_chib/chib_results.R', echo=TRUE)
install.packages("xtable")
source('~/docs/Iterative_ML_paper/R/probit_logit_chib/chib_results.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/probit_logit_chib/chib_results.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/probit_logit_chib/chib_results.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/stan_probit_logit")
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/mc_comparison_test.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm")
x = 1:3
x[4] = 4
x
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_gibbs.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test.R', echo=TRUE)
N.reps = 1000
N = 5000
d.est = rep(NA, N.reps)
x = rnorm(N)
a = akj(x, eval.point)
a$dens
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test.R', echo=TRUE)
t.test(d.est, mu = d.true)
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test.R', echo=TRUE)
t.test(d.est, mu = d.true)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
install.packages("multicore")
install.packages("snow")
library(snow)
cl = makeCluster("SOCK")
cl = makeCluster(rep("localhost", 2), "SOCK")
cl = makeCluster(rep("localhost", 4), "SOCK")
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test_mc.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test_mc.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test_mc.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/kde_test/akj_test_mc.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_ml.R', echo=TRUE)
warnings()
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_gibbs_snow.R', echo=TRUE)
log.marginal.results
mean(log.marginal.results[1,])
mean(log.marginal.results[2,])
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm")
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm")
source("stan_ml_ks_iterative_fit.R")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
rm(list = ls())
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
rm(list = ls())
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
rm(list = ls())
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
rm(list = ls())
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm")
num.mc.iter = 500
sim.files = list.dir("stan_snow")
sim.files = list.files("stan_snow")
write.csv(rnorm(2), "stan_snow/test.csv", row.names = FALSE)
sim.files = grep("^stan_snow_[0-9]+.csv$", list.files("stan_snow"), value = TRUE)
sim.nums = gsub("stan_snow|.csv", "", sim.files)
sim.nums = gsub("stan_snow_|.csv", "", sim.files)
sim.nums = as.numeric(gsub("stan_snow_|.csv", "", sim.files))
library(snow)
rm(list = ls())
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_lm")
num.mc.iter = 500
sim.files = grep("^stan_snow_[0-9]+.csv$", list.files("stan_snow"), value = TRUE)
sim.nums = as.numeric(gsub("stan_snow_|.csv", "", sim.files))
remaining.sims = setdiff(1:num.mc.iter, sim.nums)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
rm(list = ls())
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
rm(list = ls())
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
warnings()
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/stan_ml_ks_iterative_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/mc_stan_snow.R', echo=TRUE)
sim.files = grep("^stan_snow_[0-9]+.csv$", list.files("stan_snow"), value = TRUE)
sims = lapply(sim.files, function(s) read.csv(paste0("stan_snow/", s)))
log.marginal.results = as.matrix(Reduce(cbind, sims))
log.marginal.results[1,]
save(log.marginal.results, file = "stan_mc_results.RData")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_lm/gibbs_stan_lm_test.R', echo=TRUE)
load("gibbs_mc_results.RData")
mean(log.marginal.results[,2])
mean(log.marginal.results[2,])
load("stan_mc_results.RData")
mean(log.marginal.results[2,])
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/mc_gibbs_snow.R', echo=TRUE)
source("gibbs_ml.R")
for (i in 1:length(beta)){
plot(beta.posterior[i,], type = "l")
}
burn.iter = 5000
sample.iter = 50000
source("probit.R")
for (i in 1:length(beta)){
plot(beta.posterior[i,], type = "l")
}
source("probit.R")
for (i in 1:length(beta)){
plot(beta.posterior[i,], type = "l")
}
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/mc_gibbs_snow.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/stan_ml_ks_iterative_fit.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/stan_ml_ks_iterative_fit.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/stan_ml_ks_iterative_fit.R', echo=TRUE)
load("gibbs_mc_results.RData")
gibbs.results = log.marginal.results
mean(gibbs.results)
gibbs.results = log.marginal.results[1,]
mean(gibbs.results)
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
num.mc.iter = 250
sim.files = grep("^stan_snow_[0-9]+.csv$", list.files("stan_snow"), value = TRUE)
sim.nums = as.numeric(gsub("stan_snow_|.csv", "", sim.files))
remaining.sims = setdiff(1:num.mc.iter, sim.nums)
print(length(remaining.sims))
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
source("stan_ml_ks_iterative_fit.R")
library(snow)
rm(list = ls())
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
num.mc.iter = 250
sim.files = grep("^stan_snow_[0-9]+.csv$", list.files("stan_snow"), value = TRUE)
sim.nums = as.numeric(gsub("stan_snow_|.csv", "", sim.files))
remaining.sims = setdiff(1:num.mc.iter, sim.nums)
print(length(remaining.sims))
setwd("~/docs/Iterative_ML_paper/R/gibbs_stan_probit")
t1 = proc.time()
source("stan_ml_ks_iterative_fit.R")
t2 = proc.time()
t = (t2 - t1)[3]
log.marginal
t
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/mc_stan_snow.R', echo=TRUE)
save(log.marginal.results, file = "stan_mc_results.RData")
source('~/docs/Iterative_ML_paper/R/gibbs_stan_probit/gibbs_stan_probit_test.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/mc_comparison_test.R', echo=TRUE)
1 - mean(log.marginal.results$prob.probit.probit)
1 - 0.541
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/create_data.R', echo=TRUE)
setwd("~/docs/Iterative_ML_paper/R/stan_probit_logit")
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/create_data.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
fitted.logit = fitted.values(m.logit)
fitted.values
fitted.logit
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
fitted.logit = predict(m.logit, X.fit)
X.fit = seq(min(X[,2]), max(X[,2]), length.out = 1000)
fitted.logit = predict(m.logit, X.fit)
?predict.glm
fitted.logit = predict(m.logit, newdata = X.fit)
X.fit = cbind(1, seq(min(X[,2]), max(X[,2]), length.out = 1000))
fitted.logit = predict(m.logit, newdata = X.fit)
m.logit$data
m.logit$model
X.fit = data.frame(X.1 = 1, X.2 = seq(min(X[,2]), max(X[,2]), length.out = 1000))
fitted.logit = predict(m.logit, newdata = X.fit)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
rm(list = ls())
load("logitData.RData")
df = data.frame(X.1 = X[,1], X.2 = X[,2], y = y)
m.logit = glm(y ~ 0 + X.1 + X.2, data = df, family = binomial(link = "logit"))
m.probit = glm(y ~ 0 + X.1 + X.2, data = df, family = binomial(link = "probit"))
X.fit = data.frame(X.1 = 1, X.2 = seq(min(X[,2]), max(X[,2]), length.out = 1000))
fitted.logit = predict(m.logit, newdata = X.fit)
fitted.probit = fitted.values(m.probit, newdata = X.fit)
plot.data = data.frame(X = rep(X.fit[,2], times = 2),
y = c(fitted.logit, fitted.probit),
Model = rep(c("Logit", "Probit"), each = nrow(X)))
plot.data = data.frame(X = rep(X.fit[,2], times = 2),
y = c(fitted.logit, fitted.probit),
Model = rep(c("Logit", "Probit"), each = nrow(X.fit)))
fitted.probit = fitted.values(m.probit, newdata = X.fit)
X.fit = data.frame(X.1 = 1, X.2 = seq(min(X[,2]), max(X[,2]), length.out = 1000))
fitted.logit = predict(m.logit, newdata = X.fit)
fitted.probit = fitted.values(m.probit, newdata = X.fit)
rm(list = ls())
load("logitData.RData")
df = data.frame(X.1 = X[,1], X.2 = X[,2], y = y)
m.logit = glm(y ~ 0 + X.1 + X.2, data = df, family = binomial(link = "logit"))
m.probit = glm(y ~ 0 + X.1 + X.2, data = df, family = binomial(link = "probit"))
X.fit = data.frame(X.1 = 1, X.2 = seq(min(X[,2]), max(X[,2]), length.out = 1000))
fitted.logit = predict(m.logit, newdata = X.fit)
fitted.probit = fitted.values(m.probit, newdata = X.fit)
fitted.probit = predict(m.probit, newdata = X.fit)
plot.data = data.frame(X = rep(X.fit[,2], times = 2),
y = c(fitted.logit, fitted.probit),
Model = rep(c("Logit", "Probit"), each = nrow(X.fit)))
ggplot(plot.data, aes(X, y)) + geom_line(aes(color = Model))
?predict.glm
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
ggplot(plot.data, aes(X, y)) + geom_line(aes(color = Model)) +
theme_bw() +
theme(legend.position = "top") +
ggtitle("Plot of Logit and Probit Curves") +
theme(plot.title = element_text(hjust = 0.5))
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
source('~/docs/Iterative_ML_paper/R/stan_probit_logit/plot.R', echo=TRUE)
